// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/go-redis/redis (interfaces: Pipeliner)

package mocks

import (
	time "time"

	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Pipeliner interface
type MockPipeliner struct {
	ctrl     *gomock.Controller
	recorder *_MockPipelinerRecorder
	redis.Pipeliner
}

// Recorder for MockPipeliner (not exported)
type _MockPipelinerRecorder struct {
	mock *MockPipeliner
}

func NewMockPipeliner(ctrl *gomock.Controller) *MockPipeliner {
	mock := &MockPipeliner{ctrl: ctrl}
	mock.recorder = &_MockPipelinerRecorder{mock}
	return mock
}

func (_m *MockPipeliner) EXPECT() *_MockPipelinerRecorder {
	return _m.recorder
}

func (_m *MockPipeliner) Append(_param0 string, _param1 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "Append", _param0, _param1)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Append(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Append", arg0, arg1)
}

func (_m *MockPipeliner) Auth(_param0 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Auth", _param0)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Auth(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Auth", arg0)
}

func (_m *MockPipeliner) BLPop(_param0 time.Duration, _param1 ...string) *redis.StringSliceCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BLPop", _s...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BLPop(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BLPop", _s...)
}

func (_m *MockPipeliner) BRPop(_param0 time.Duration, _param1 ...string) *redis.StringSliceCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BRPop", _s...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BRPop(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BRPop", _s...)
}

func (_m *MockPipeliner) BRPopLPush(_param0 string, _param1 string, _param2 time.Duration) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "BRPopLPush", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BRPopLPush(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BRPopLPush", arg0, arg1, arg2)
}

func (_m *MockPipeliner) BgRewriteAOF() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "BgRewriteAOF")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BgRewriteAOF() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BgRewriteAOF")
}

func (_m *MockPipeliner) BgSave() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "BgSave")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BgSave() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BgSave")
}

func (_m *MockPipeliner) BitCount(_param0 string, _param1 *redis.BitCount) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "BitCount", _param0, _param1)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BitCount(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BitCount", arg0, arg1)
}

func (_m *MockPipeliner) BitOpAnd(_param0 string, _param1 ...string) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BitOpAnd", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BitOpAnd(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BitOpAnd", _s...)
}

func (_m *MockPipeliner) BitOpNot(_param0 string, _param1 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "BitOpNot", _param0, _param1)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BitOpNot(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BitOpNot", arg0, arg1)
}

func (_m *MockPipeliner) BitOpOr(_param0 string, _param1 ...string) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BitOpOr", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BitOpOr(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BitOpOr", _s...)
}

func (_m *MockPipeliner) BitOpXor(_param0 string, _param1 ...string) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BitOpXor", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BitOpXor(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BitOpXor", _s...)
}

func (_m *MockPipeliner) BitPos(_param0 string, _param1 int64, _param2 ...int64) *redis.IntCmd {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BitPos", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) BitPos(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BitPos", _s...)
}

func (_m *MockPipeliner) ClientGetName() *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "ClientGetName")
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClientGetName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientGetName")
}

func (_m *MockPipeliner) ClientKill(_param0 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ClientKill", _param0)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClientKill(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientKill", arg0)
}

func (_m *MockPipeliner) ClientList() *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "ClientList")
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClientList() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientList")
}

func (_m *MockPipeliner) ClientPause(_param0 time.Duration) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "ClientPause", _param0)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClientPause(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientPause", arg0)
}

func (_m *MockPipeliner) ClientSetName(_param0 string) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "ClientSetName", _param0)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClientSetName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientSetName", arg0)
}

func (_m *MockPipeliner) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockPipeliner) ClusterAddSlots(_param0 ...int) *redis.StatusCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ClusterAddSlots", _s...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterAddSlots(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterAddSlots", arg0...)
}

func (_m *MockPipeliner) ClusterAddSlotsRange(_param0 int, _param1 int) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ClusterAddSlotsRange", _param0, _param1)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterAddSlotsRange(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterAddSlotsRange", arg0, arg1)
}

func (_m *MockPipeliner) ClusterCountFailureReports(_param0 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ClusterCountFailureReports", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterCountFailureReports(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterCountFailureReports", arg0)
}

func (_m *MockPipeliner) ClusterCountKeysInSlot(_param0 int) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ClusterCountKeysInSlot", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterCountKeysInSlot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterCountKeysInSlot", arg0)
}

func (_m *MockPipeliner) ClusterDelSlots(_param0 ...int) *redis.StatusCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ClusterDelSlots", _s...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterDelSlots(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterDelSlots", arg0...)
}

func (_m *MockPipeliner) ClusterDelSlotsRange(_param0 int, _param1 int) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ClusterDelSlotsRange", _param0, _param1)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterDelSlotsRange(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterDelSlotsRange", arg0, arg1)
}

func (_m *MockPipeliner) ClusterFailover() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ClusterFailover")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterFailover() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterFailover")
}

func (_m *MockPipeliner) ClusterForget(_param0 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ClusterForget", _param0)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterForget(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterForget", arg0)
}

func (_m *MockPipeliner) ClusterInfo() *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "ClusterInfo")
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterInfo")
}

func (_m *MockPipeliner) ClusterKeySlot(_param0 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ClusterKeySlot", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterKeySlot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterKeySlot", arg0)
}

func (_m *MockPipeliner) ClusterMeet(_param0 string, _param1 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ClusterMeet", _param0, _param1)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterMeet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterMeet", arg0, arg1)
}

func (_m *MockPipeliner) ClusterNodes() *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "ClusterNodes")
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterNodes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterNodes")
}

func (_m *MockPipeliner) ClusterReplicate(_param0 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ClusterReplicate", _param0)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterReplicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterReplicate", arg0)
}

func (_m *MockPipeliner) ClusterResetHard() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ClusterResetHard")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterResetHard() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterResetHard")
}

func (_m *MockPipeliner) ClusterResetSoft() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ClusterResetSoft")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterResetSoft() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterResetSoft")
}

func (_m *MockPipeliner) ClusterSaveConfig() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ClusterSaveConfig")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterSaveConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterSaveConfig")
}

func (_m *MockPipeliner) ClusterSlaves(_param0 string) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "ClusterSlaves", _param0)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterSlaves(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterSlaves", arg0)
}

func (_m *MockPipeliner) ClusterSlots() *redis.ClusterSlotsCmd {
	ret := _m.ctrl.Call(_m, "ClusterSlots")
	ret0, _ := ret[0].(*redis.ClusterSlotsCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ClusterSlots() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClusterSlots")
}

func (_m *MockPipeliner) Command() *redis.CommandsInfoCmd {
	ret := _m.ctrl.Call(_m, "Command")
	ret0, _ := ret[0].(*redis.CommandsInfoCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Command() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Command")
}

func (_m *MockPipeliner) ConfigGet(_param0 string) *redis.SliceCmd {
	ret := _m.ctrl.Call(_m, "ConfigGet", _param0)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ConfigGet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfigGet", arg0)
}

func (_m *MockPipeliner) ConfigResetStat() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ConfigResetStat")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ConfigResetStat() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfigResetStat")
}

func (_m *MockPipeliner) ConfigSet(_param0 string, _param1 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ConfigSet", _param0, _param1)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ConfigSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfigSet", arg0, arg1)
}

func (_m *MockPipeliner) DbSize() *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "DbSize")
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) DbSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DbSize")
}

func (_m *MockPipeliner) DebugObject(_param0 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "DebugObject", _param0)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) DebugObject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DebugObject", arg0)
}

func (_m *MockPipeliner) Decr(_param0 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "Decr", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Decr(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Decr", arg0)
}

func (_m *MockPipeliner) DecrBy(_param0 string, _param1 int64) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "DecrBy", _param0, _param1)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) DecrBy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecrBy", arg0, arg1)
}

func (_m *MockPipeliner) Del(_param0 ...string) *redis.IntCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Del", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Del(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Del", arg0...)
}

func (_m *MockPipeliner) Discard() error {
	ret := _m.ctrl.Call(_m, "Discard")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Discard() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Discard")
}

func (_m *MockPipeliner) Dump(_param0 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "Dump", _param0)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Dump(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dump", arg0)
}

func (_m *MockPipeliner) Echo(_param0 interface{}) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "Echo", _param0)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Echo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Echo", arg0)
}

func (_m *MockPipeliner) Eval(_param0 string, _param1 []string, _param2 ...interface{}) *redis.Cmd {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Eval", _s...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Eval(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Eval", _s...)
}

func (_m *MockPipeliner) EvalSha(_param0 string, _param1 []string, _param2 ...interface{}) *redis.Cmd {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "EvalSha", _s...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) EvalSha(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EvalSha", _s...)
}

func (_m *MockPipeliner) Exec() ([]redis.Cmder, error) {
	ret := _m.ctrl.Call(_m, "Exec")
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPipelinerRecorder) Exec() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exec")
}

func (_m *MockPipeliner) Exists(_param0 ...string) *redis.IntCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Exists", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Exists(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exists", arg0...)
}

func (_m *MockPipeliner) Expire(_param0 string, _param1 time.Duration) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "Expire", _param0, _param1)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Expire(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Expire", arg0, arg1)
}

func (_m *MockPipeliner) ExpireAt(_param0 string, _param1 time.Time) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "ExpireAt", _param0, _param1)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ExpireAt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExpireAt", arg0, arg1)
}

func (_m *MockPipeliner) FlushAll() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "FlushAll")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) FlushAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FlushAll")
}

func (_m *MockPipeliner) FlushDb() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "FlushDb")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) FlushDb() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FlushDb")
}

func (_m *MockPipeliner) GeoAdd(_param0 string, _param1 ...*redis.GeoLocation) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GeoAdd", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) GeoAdd(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GeoAdd", _s...)
}

func (_m *MockPipeliner) GeoDist(_param0 string, _param1 string, _param2 string, _param3 string) *redis.FloatCmd {
	ret := _m.ctrl.Call(_m, "GeoDist", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) GeoDist(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GeoDist", arg0, arg1, arg2, arg3)
}

func (_m *MockPipeliner) GeoHash(_param0 string, _param1 ...string) *redis.StringSliceCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GeoHash", _s...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) GeoHash(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GeoHash", _s...)
}

func (_m *MockPipeliner) GeoPos(_param0 string, _param1 ...string) *redis.GeoPosCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GeoPos", _s...)
	ret0, _ := ret[0].(*redis.GeoPosCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) GeoPos(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GeoPos", _s...)
}

func (_m *MockPipeliner) GeoRadius(_param0 string, _param1 float64, _param2 float64, _param3 *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	ret := _m.ctrl.Call(_m, "GeoRadius", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*redis.GeoLocationCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) GeoRadius(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GeoRadius", arg0, arg1, arg2, arg3)
}

func (_m *MockPipeliner) GeoRadiusByMember(_param0 string, _param1 string, _param2 *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	ret := _m.ctrl.Call(_m, "GeoRadiusByMember", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.GeoLocationCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) GeoRadiusByMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GeoRadiusByMember", arg0, arg1, arg2)
}

func (_m *MockPipeliner) Get(_param0 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockPipeliner) GetBit(_param0 string, _param1 int64) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "GetBit", _param0, _param1)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) GetBit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBit", arg0, arg1)
}

func (_m *MockPipeliner) GetRange(_param0 string, _param1 int64, _param2 int64) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "GetRange", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) GetRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRange", arg0, arg1, arg2)
}

func (_m *MockPipeliner) GetSet(_param0 string, _param1 interface{}) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "GetSet", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) GetSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSet", arg0, arg1)
}

func (_m *MockPipeliner) HDel(_param0 string, _param1 ...string) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "HDel", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HDel(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HDel", _s...)
}

func (_m *MockPipeliner) HExists(_param0 string, _param1 string) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "HExists", _param0, _param1)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HExists(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HExists", arg0, arg1)
}

func (_m *MockPipeliner) HGet(_param0 string, _param1 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "HGet", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HGet", arg0, arg1)
}

func (_m *MockPipeliner) HGetAll(_param0 string) *redis.StringStringMapCmd {
	ret := _m.ctrl.Call(_m, "HGetAll", _param0)
	ret0, _ := ret[0].(*redis.StringStringMapCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HGetAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HGetAll", arg0)
}

func (_m *MockPipeliner) HIncrBy(_param0 string, _param1 string, _param2 int64) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "HIncrBy", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HIncrBy(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HIncrBy", arg0, arg1, arg2)
}

func (_m *MockPipeliner) HIncrByFloat(_param0 string, _param1 string, _param2 float64) *redis.FloatCmd {
	ret := _m.ctrl.Call(_m, "HIncrByFloat", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HIncrByFloat(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HIncrByFloat", arg0, arg1, arg2)
}

func (_m *MockPipeliner) HKeys(_param0 string) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "HKeys", _param0)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HKeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HKeys", arg0)
}

func (_m *MockPipeliner) HLen(_param0 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "HLen", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HLen(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HLen", arg0)
}

func (_m *MockPipeliner) HMGet(_param0 string, _param1 ...string) *redis.SliceCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "HMGet", _s...)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HMGet(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HMGet", _s...)
}

func (_m *MockPipeliner) HMSet(_param0 string, _param1 map[string]interface{}) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "HMSet", _param0, _param1)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HMSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HMSet", arg0, arg1)
}

func (_m *MockPipeliner) HScan(_param0 string, _param1 uint64, _param2 string, _param3 int64) *redis.ScanCmd {
	ret := _m.ctrl.Call(_m, "HScan", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HScan(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HScan", arg0, arg1, arg2, arg3)
}

func (_m *MockPipeliner) HSet(_param0 string, _param1 string, _param2 interface{}) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "HSet", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HSet", arg0, arg1, arg2)
}

func (_m *MockPipeliner) HSetNX(_param0 string, _param1 string, _param2 interface{}) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "HSetNX", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HSetNX(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HSetNX", arg0, arg1, arg2)
}

func (_m *MockPipeliner) HVals(_param0 string) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "HVals", _param0)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) HVals(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HVals", arg0)
}

func (_m *MockPipeliner) Incr(_param0 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "Incr", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Incr(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Incr", arg0)
}

func (_m *MockPipeliner) IncrBy(_param0 string, _param1 int64) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "IncrBy", _param0, _param1)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) IncrBy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncrBy", arg0, arg1)
}

func (_m *MockPipeliner) IncrByFloat(_param0 string, _param1 float64) *redis.FloatCmd {
	ret := _m.ctrl.Call(_m, "IncrByFloat", _param0, _param1)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) IncrByFloat(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncrByFloat", arg0, arg1)
}

func (_m *MockPipeliner) Info(_param0 ...string) *redis.StringCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Info", _s...)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Info(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Info", arg0...)
}

func (_m *MockPipeliner) Keys(_param0 string) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "Keys", _param0)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Keys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Keys", arg0)
}

func (_m *MockPipeliner) LIndex(_param0 string, _param1 int64) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "LIndex", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LIndex(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LIndex", arg0, arg1)
}

func (_m *MockPipeliner) LInsert(_param0 string, _param1 string, _param2 interface{}, _param3 interface{}) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "LInsert", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LInsert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LInsert", arg0, arg1, arg2, arg3)
}

func (_m *MockPipeliner) LInsertAfter(_param0 string, _param1 interface{}, _param2 interface{}) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "LInsertAfter", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LInsertAfter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LInsertAfter", arg0, arg1, arg2)
}

func (_m *MockPipeliner) LInsertBefore(_param0 string, _param1 interface{}, _param2 interface{}) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "LInsertBefore", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LInsertBefore(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LInsertBefore", arg0, arg1, arg2)
}

func (_m *MockPipeliner) LLen(_param0 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "LLen", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LLen(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LLen", arg0)
}

func (_m *MockPipeliner) LPop(_param0 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "LPop", _param0)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LPop(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LPop", arg0)
}

func (_m *MockPipeliner) LPush(_param0 string, _param1 ...interface{}) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LPush", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LPush(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LPush", _s...)
}

func (_m *MockPipeliner) LPushX(_param0 string, _param1 interface{}) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "LPushX", _param0, _param1)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LPushX(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LPushX", arg0, arg1)
}

func (_m *MockPipeliner) LRange(_param0 string, _param1 int64, _param2 int64) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "LRange", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LRange", arg0, arg1, arg2)
}

func (_m *MockPipeliner) LRem(_param0 string, _param1 int64, _param2 interface{}) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "LRem", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LRem(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LRem", arg0, arg1, arg2)
}

func (_m *MockPipeliner) LSet(_param0 string, _param1 int64, _param2 interface{}) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "LSet", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LSet", arg0, arg1, arg2)
}

func (_m *MockPipeliner) LTrim(_param0 string, _param1 int64, _param2 int64) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "LTrim", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LTrim(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LTrim", arg0, arg1, arg2)
}

func (_m *MockPipeliner) LastSave() *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "LastSave")
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) LastSave() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LastSave")
}

func (_m *MockPipeliner) MGet(_param0 ...string) *redis.SliceCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "MGet", _s...)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) MGet(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MGet", arg0...)
}

func (_m *MockPipeliner) MSet(_param0 ...interface{}) *redis.StatusCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "MSet", _s...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) MSet(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MSet", arg0...)
}

func (_m *MockPipeliner) MSetNX(_param0 ...interface{}) *redis.BoolCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "MSetNX", _s...)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) MSetNX(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MSetNX", arg0...)
}

func (_m *MockPipeliner) Migrate(_param0 string, _param1 string, _param2 string, _param3 int64, _param4 time.Duration) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Migrate", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Migrate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Migrate", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockPipeliner) Move(_param0 string, _param1 int64) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "Move", _param0, _param1)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Move(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Move", arg0, arg1)
}

func (_m *MockPipeliner) ObjectEncoding(_param0 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "ObjectEncoding", _param0)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ObjectEncoding(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ObjectEncoding", arg0)
}

func (_m *MockPipeliner) ObjectIdleTime(_param0 string) *redis.DurationCmd {
	ret := _m.ctrl.Call(_m, "ObjectIdleTime", _param0)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ObjectIdleTime(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ObjectIdleTime", arg0)
}

func (_m *MockPipeliner) ObjectRefCount(_param0 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ObjectRefCount", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ObjectRefCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ObjectRefCount", arg0)
}

func (_m *MockPipeliner) PExpire(_param0 string, _param1 time.Duration) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "PExpire", _param0, _param1)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) PExpire(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PExpire", arg0, arg1)
}

func (_m *MockPipeliner) PExpireAt(_param0 string, _param1 time.Time) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "PExpireAt", _param0, _param1)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) PExpireAt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PExpireAt", arg0, arg1)
}

func (_m *MockPipeliner) PFAdd(_param0 string, _param1 ...interface{}) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PFAdd", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) PFAdd(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PFAdd", _s...)
}

func (_m *MockPipeliner) PFCount(_param0 ...string) *redis.IntCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PFCount", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) PFCount(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PFCount", arg0...)
}

func (_m *MockPipeliner) PFMerge(_param0 string, _param1 ...string) *redis.StatusCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PFMerge", _s...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) PFMerge(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PFMerge", _s...)
}

func (_m *MockPipeliner) PTTL(_param0 string) *redis.DurationCmd {
	ret := _m.ctrl.Call(_m, "PTTL", _param0)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) PTTL(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PTTL", arg0)
}

func (_m *MockPipeliner) Persist(_param0 string) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "Persist", _param0)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Persist(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Persist", arg0)
}

func (_m *MockPipeliner) Ping() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Ping")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Ping() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ping")
}

func (_m *MockPipeliner) Pipeline() redis.Pipeliner {
	ret := _m.ctrl.Call(_m, "Pipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Pipeline() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pipeline")
}

func (_m *MockPipeliner) Pipelined(_param0 func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	ret := _m.ctrl.Call(_m, "Pipelined", _param0)
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPipelinerRecorder) Pipelined(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pipelined", arg0)
}

func (_m *MockPipeliner) Process(_param0 redis.Cmder) error {
	ret := _m.ctrl.Call(_m, "Process", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Process(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Process", arg0)
}

func (_m *MockPipeliner) PubSubChannels(_param0 string) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "PubSubChannels", _param0)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) PubSubChannels(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PubSubChannels", arg0)
}

func (_m *MockPipeliner) PubSubNumPat() *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "PubSubNumPat")
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) PubSubNumPat() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PubSubNumPat")
}

func (_m *MockPipeliner) PubSubNumSub(_param0 ...string) *redis.StringIntMapCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PubSubNumSub", _s...)
	ret0, _ := ret[0].(*redis.StringIntMapCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) PubSubNumSub(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PubSubNumSub", arg0...)
}

func (_m *MockPipeliner) Quit() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Quit")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Quit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Quit")
}

func (_m *MockPipeliner) RPop(_param0 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "RPop", _param0)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) RPop(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RPop", arg0)
}

func (_m *MockPipeliner) RPopLPush(_param0 string, _param1 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "RPopLPush", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) RPopLPush(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RPopLPush", arg0, arg1)
}

func (_m *MockPipeliner) RPush(_param0 string, _param1 ...interface{}) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RPush", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) RPush(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RPush", _s...)
}

func (_m *MockPipeliner) RPushX(_param0 string, _param1 interface{}) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "RPushX", _param0, _param1)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) RPushX(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RPushX", arg0, arg1)
}

func (_m *MockPipeliner) RandomKey() *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "RandomKey")
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) RandomKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RandomKey")
}

func (_m *MockPipeliner) ReadOnly() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ReadOnly")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ReadOnly() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadOnly")
}

func (_m *MockPipeliner) ReadWrite() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ReadWrite")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ReadWrite() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadWrite")
}

func (_m *MockPipeliner) Rename(_param0 string, _param1 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Rename", _param0, _param1)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Rename(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rename", arg0, arg1)
}

func (_m *MockPipeliner) RenameNX(_param0 string, _param1 string) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "RenameNX", _param0, _param1)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) RenameNX(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RenameNX", arg0, arg1)
}

func (_m *MockPipeliner) Restore(_param0 string, _param1 time.Duration, _param2 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Restore", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Restore(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Restore", arg0, arg1, arg2)
}

func (_m *MockPipeliner) RestoreReplace(_param0 string, _param1 time.Duration, _param2 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "RestoreReplace", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) RestoreReplace(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RestoreReplace", arg0, arg1, arg2)
}

func (_m *MockPipeliner) SAdd(_param0 string, _param1 ...interface{}) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SAdd", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SAdd(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SAdd", _s...)
}

func (_m *MockPipeliner) SCard(_param0 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "SCard", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SCard(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SCard", arg0)
}

func (_m *MockPipeliner) SDiff(_param0 ...string) *redis.StringSliceCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SDiff", _s...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SDiff(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SDiff", arg0...)
}

func (_m *MockPipeliner) SDiffStore(_param0 string, _param1 ...string) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SDiffStore", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SDiffStore(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SDiffStore", _s...)
}

func (_m *MockPipeliner) SInter(_param0 ...string) *redis.StringSliceCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SInter", _s...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SInter(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SInter", arg0...)
}

func (_m *MockPipeliner) SInterStore(_param0 string, _param1 ...string) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SInterStore", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SInterStore(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SInterStore", _s...)
}

func (_m *MockPipeliner) SIsMember(_param0 string, _param1 interface{}) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "SIsMember", _param0, _param1)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SIsMember(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SIsMember", arg0, arg1)
}

func (_m *MockPipeliner) SMembers(_param0 string) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "SMembers", _param0)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SMembers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SMembers", arg0)
}

func (_m *MockPipeliner) SMove(_param0 string, _param1 string, _param2 interface{}) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "SMove", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SMove(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SMove", arg0, arg1, arg2)
}

func (_m *MockPipeliner) SPop(_param0 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "SPop", _param0)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SPop(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SPop", arg0)
}

func (_m *MockPipeliner) SPopN(_param0 string, _param1 int64) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "SPopN", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SPopN(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SPopN", arg0, arg1)
}

func (_m *MockPipeliner) SRandMember(_param0 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "SRandMember", _param0)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SRandMember(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SRandMember", arg0)
}

func (_m *MockPipeliner) SRandMemberN(_param0 string, _param1 int64) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "SRandMemberN", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SRandMemberN(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SRandMemberN", arg0, arg1)
}

func (_m *MockPipeliner) SRem(_param0 string, _param1 ...interface{}) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SRem", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SRem(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SRem", _s...)
}

func (_m *MockPipeliner) SScan(_param0 string, _param1 uint64, _param2 string, _param3 int64) *redis.ScanCmd {
	ret := _m.ctrl.Call(_m, "SScan", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SScan(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SScan", arg0, arg1, arg2, arg3)
}

func (_m *MockPipeliner) SUnion(_param0 ...string) *redis.StringSliceCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SUnion", _s...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SUnion(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SUnion", arg0...)
}

func (_m *MockPipeliner) SUnionStore(_param0 string, _param1 ...string) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SUnionStore", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SUnionStore(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SUnionStore", _s...)
}

func (_m *MockPipeliner) Save() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Save")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Save() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save")
}

func (_m *MockPipeliner) Scan(_param0 uint64, _param1 string, _param2 int64) *redis.ScanCmd {
	ret := _m.ctrl.Call(_m, "Scan", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Scan(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Scan", arg0, arg1, arg2)
}

func (_m *MockPipeliner) ScriptExists(_param0 ...string) *redis.BoolSliceCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ScriptExists", _s...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ScriptExists(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScriptExists", arg0...)
}

func (_m *MockPipeliner) ScriptFlush() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ScriptFlush")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ScriptFlush() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScriptFlush")
}

func (_m *MockPipeliner) ScriptKill() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ScriptKill")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ScriptKill() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScriptKill")
}

func (_m *MockPipeliner) ScriptLoad(_param0 string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "ScriptLoad", _param0)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ScriptLoad(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScriptLoad", arg0)
}

func (_m *MockPipeliner) Select(_param0 int) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Select", _param0)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Select(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Select", arg0)
}

func (_m *MockPipeliner) Set(_param0 string, _param1 interface{}, _param2 time.Duration) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Set", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1, arg2)
}

func (_m *MockPipeliner) SetBit(_param0 string, _param1 int64, _param2 int) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "SetBit", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SetBit(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBit", arg0, arg1, arg2)
}

func (_m *MockPipeliner) SetNX(_param0 string, _param1 interface{}, _param2 time.Duration) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "SetNX", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SetNX(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNX", arg0, arg1, arg2)
}

func (_m *MockPipeliner) SetRange(_param0 string, _param1 int64, _param2 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "SetRange", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SetRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRange", arg0, arg1, arg2)
}

func (_m *MockPipeliner) SetXX(_param0 string, _param1 interface{}, _param2 time.Duration) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "SetXX", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SetXX(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetXX", arg0, arg1, arg2)
}

func (_m *MockPipeliner) Shutdown() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Shutdown")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockPipeliner) ShutdownNoSave() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ShutdownNoSave")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ShutdownNoSave() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShutdownNoSave")
}

func (_m *MockPipeliner) ShutdownSave() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "ShutdownSave")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ShutdownSave() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShutdownSave")
}

func (_m *MockPipeliner) SlaveOf(_param0 string, _param1 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "SlaveOf", _param0, _param1)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SlaveOf(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SlaveOf", arg0, arg1)
}

func (_m *MockPipeliner) Sort(_param0 string, _param1 *redis.Sort) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "Sort", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Sort(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sort", arg0, arg1)
}

func (_m *MockPipeliner) SortInterfaces(_param0 string, _param1 *redis.Sort) *redis.SliceCmd {
	ret := _m.ctrl.Call(_m, "SortInterfaces", _param0, _param1)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) SortInterfaces(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SortInterfaces", arg0, arg1)
}

func (_m *MockPipeliner) StrLen(_param0 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "StrLen", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) StrLen(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StrLen", arg0)
}

func (_m *MockPipeliner) TTL(_param0 string) *redis.DurationCmd {
	ret := _m.ctrl.Call(_m, "TTL", _param0)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) TTL(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TTL", arg0)
}

func (_m *MockPipeliner) Time() *redis.TimeCmd {
	ret := _m.ctrl.Call(_m, "Time")
	ret0, _ := ret[0].(*redis.TimeCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Time() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Time")
}

func (_m *MockPipeliner) Type(_param0 string) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Type", _param0)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Type(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Type", arg0)
}

func (_m *MockPipeliner) Unlink(_param0 ...string) *redis.IntCmd {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Unlink", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) Unlink(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unlink", arg0...)
}

func (_m *MockPipeliner) ZAdd(_param0 string, _param1 ...redis.Z) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ZAdd", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZAdd(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZAdd", _s...)
}

func (_m *MockPipeliner) ZAddCh(_param0 string, _param1 ...redis.Z) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ZAddCh", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZAddCh(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZAddCh", _s...)
}

func (_m *MockPipeliner) ZAddNX(_param0 string, _param1 ...redis.Z) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ZAddNX", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZAddNX(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZAddNX", _s...)
}

func (_m *MockPipeliner) ZAddNXCh(_param0 string, _param1 ...redis.Z) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ZAddNXCh", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZAddNXCh(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZAddNXCh", _s...)
}

func (_m *MockPipeliner) ZAddXX(_param0 string, _param1 ...redis.Z) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ZAddXX", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZAddXX(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZAddXX", _s...)
}

func (_m *MockPipeliner) ZAddXXCh(_param0 string, _param1 ...redis.Z) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ZAddXXCh", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZAddXXCh(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZAddXXCh", _s...)
}

func (_m *MockPipeliner) ZCard(_param0 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ZCard", _param0)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZCard(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZCard", arg0)
}

func (_m *MockPipeliner) ZCount(_param0 string, _param1 string, _param2 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ZCount", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZCount", arg0, arg1, arg2)
}

func (_m *MockPipeliner) ZIncr(_param0 string, _param1 redis.Z) *redis.FloatCmd {
	ret := _m.ctrl.Call(_m, "ZIncr", _param0, _param1)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZIncr(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZIncr", arg0, arg1)
}

func (_m *MockPipeliner) ZIncrBy(_param0 string, _param1 float64, _param2 string) *redis.FloatCmd {
	ret := _m.ctrl.Call(_m, "ZIncrBy", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZIncrBy(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZIncrBy", arg0, arg1, arg2)
}

func (_m *MockPipeliner) ZIncrNX(_param0 string, _param1 redis.Z) *redis.FloatCmd {
	ret := _m.ctrl.Call(_m, "ZIncrNX", _param0, _param1)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZIncrNX(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZIncrNX", arg0, arg1)
}

func (_m *MockPipeliner) ZIncrXX(_param0 string, _param1 redis.Z) *redis.FloatCmd {
	ret := _m.ctrl.Call(_m, "ZIncrXX", _param0, _param1)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZIncrXX(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZIncrXX", arg0, arg1)
}

func (_m *MockPipeliner) ZInterStore(_param0 string, _param1 redis.ZStore, _param2 ...string) *redis.IntCmd {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ZInterStore", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZInterStore(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZInterStore", _s...)
}

func (_m *MockPipeliner) ZRange(_param0 string, _param1 int64, _param2 int64) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRange", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRange", arg0, arg1, arg2)
}

func (_m *MockPipeliner) ZRangeByLex(_param0 string, _param1 redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRangeByLex", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRangeByLex(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRangeByLex", arg0, arg1)
}

func (_m *MockPipeliner) ZRangeByScore(_param0 string, _param1 redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRangeByScore", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRangeByScore(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRangeByScore", arg0, arg1)
}

func (_m *MockPipeliner) ZRangeByScoreWithScores(_param0 string, _param1 redis.ZRangeBy) *redis.ZSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRangeByScoreWithScores", _param0, _param1)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRangeByScoreWithScores(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRangeByScoreWithScores", arg0, arg1)
}

func (_m *MockPipeliner) ZRangeWithScores(_param0 string, _param1 int64, _param2 int64) *redis.ZSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRangeWithScores", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRangeWithScores(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRangeWithScores", arg0, arg1, arg2)
}

func (_m *MockPipeliner) ZRank(_param0 string, _param1 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ZRank", _param0, _param1)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRank(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRank", arg0, arg1)
}

func (_m *MockPipeliner) ZRem(_param0 string, _param1 ...interface{}) *redis.IntCmd {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ZRem", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRem(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRem", _s...)
}

func (_m *MockPipeliner) ZRemRangeByLex(_param0 string, _param1 string, _param2 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ZRemRangeByLex", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRemRangeByLex(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRemRangeByLex", arg0, arg1, arg2)
}

func (_m *MockPipeliner) ZRemRangeByRank(_param0 string, _param1 int64, _param2 int64) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ZRemRangeByRank", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRemRangeByRank(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRemRangeByRank", arg0, arg1, arg2)
}

func (_m *MockPipeliner) ZRemRangeByScore(_param0 string, _param1 string, _param2 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ZRemRangeByScore", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRemRangeByScore(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRemRangeByScore", arg0, arg1, arg2)
}

func (_m *MockPipeliner) ZRevRange(_param0 string, _param1 int64, _param2 int64) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRevRange", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRevRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRevRange", arg0, arg1, arg2)
}

func (_m *MockPipeliner) ZRevRangeByLex(_param0 string, _param1 redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRevRangeByLex", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRevRangeByLex(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRevRangeByLex", arg0, arg1)
}

func (_m *MockPipeliner) ZRevRangeByScore(_param0 string, _param1 redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRevRangeByScore", _param0, _param1)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRevRangeByScore(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRevRangeByScore", arg0, arg1)
}

func (_m *MockPipeliner) ZRevRangeByScoreWithScores(_param0 string, _param1 redis.ZRangeBy) *redis.ZSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRevRangeByScoreWithScores", _param0, _param1)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRevRangeByScoreWithScores(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRevRangeByScoreWithScores", arg0, arg1)
}

func (_m *MockPipeliner) ZRevRangeWithScores(_param0 string, _param1 int64, _param2 int64) *redis.ZSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRevRangeWithScores", _param0, _param1, _param2)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRevRangeWithScores(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRevRangeWithScores", arg0, arg1, arg2)
}

func (_m *MockPipeliner) ZRevRank(_param0 string, _param1 string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ZRevRank", _param0, _param1)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZRevRank(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRevRank", arg0, arg1)
}

func (_m *MockPipeliner) ZScan(_param0 string, _param1 uint64, _param2 string, _param3 int64) *redis.ScanCmd {
	ret := _m.ctrl.Call(_m, "ZScan", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZScan(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZScan", arg0, arg1, arg2, arg3)
}

func (_m *MockPipeliner) ZScore(_param0 string, _param1 string) *redis.FloatCmd {
	ret := _m.ctrl.Call(_m, "ZScore", _param0, _param1)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZScore(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZScore", arg0, arg1)
}

func (_m *MockPipeliner) ZUnionStore(_param0 string, _param1 redis.ZStore, _param2 ...string) *redis.IntCmd {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ZUnionStore", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

func (_mr *_MockPipelinerRecorder) ZUnionStore(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZUnionStore", _s...)
}

func (_m *MockPipeliner) discard() error {
	ret := _m.ctrl.Call(_m, "discard")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPipelinerRecorder) discard() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "discard")
}

func (_m *MockPipeliner) pipelined(_param0 func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	ret := _m.ctrl.Call(_m, "pipelined", _param0)
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPipelinerRecorder) pipelined(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "pipelined", arg0)
}

var _ redis.Pipeliner = (*MockPipeliner)(nil)
