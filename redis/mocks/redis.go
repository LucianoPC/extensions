// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/redis.go

package mocks

import (
	context "context"
	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockRedisClient is a mock of RedisClient interface
type MockRedisClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedisClientMockRecorder
}

// MockRedisClientMockRecorder is the mock recorder for MockRedisClient
type MockRedisClientMockRecorder struct {
	mock *MockRedisClient
}

// NewMockRedisClient creates a new mock instance
func NewMockRedisClient(ctrl *gomock.Controller) *MockRedisClient {
	mock := &MockRedisClient{ctrl: ctrl}
	mock.recorder = &MockRedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRedisClient) EXPECT() *MockRedisClientMockRecorder {
	return _m.recorder
}

// BLPop mocks base method
func (_m *MockRedisClient) BLPop(timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	_s := []interface{}{timeout}
	for _, _x := range keys {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BLPop", _s...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// BLPop indicates an expected call of BLPop
func (_mr *MockRedisClientMockRecorder) BLPop(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BLPop", reflect.TypeOf((*MockRedisClient)(nil).BLPop), _s...)
}

// Close mocks base method
func (_m *MockRedisClient) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockRedisClientMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockRedisClient)(nil).Close))
}

// Context mocks base method
func (_m *MockRedisClient) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockRedisClientMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Context", reflect.TypeOf((*MockRedisClient)(nil).Context))
}

// Del mocks base method
func (_m *MockRedisClient) Del(keys ...string) *redis.IntCmd {
	_s := []interface{}{}
	for _, _x := range keys {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Del", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Del indicates an expected call of Del
func (_mr *MockRedisClientMockRecorder) Del(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Del", reflect.TypeOf((*MockRedisClient)(nil).Del), arg0...)
}

// Eval mocks base method
func (_m *MockRedisClient) Eval(script string, keys []string, args ...interface{}) *redis.Cmd {
	_s := []interface{}{script, keys}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Eval", _s...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// Eval indicates an expected call of Eval
func (_mr *MockRedisClientMockRecorder) Eval(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Eval", reflect.TypeOf((*MockRedisClient)(nil).Eval), _s...)
}

// EvalSha mocks base method
func (_m *MockRedisClient) EvalSha(sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	_s := []interface{}{sha1, keys}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "EvalSha", _s...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// EvalSha indicates an expected call of EvalSha
func (_mr *MockRedisClientMockRecorder) EvalSha(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EvalSha", reflect.TypeOf((*MockRedisClient)(nil).EvalSha), _s...)
}

// Exists mocks base method
func (_m *MockRedisClient) Exists(keys ...string) *redis.IntCmd {
	_s := []interface{}{}
	for _, _x := range keys {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Exists", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Exists indicates an expected call of Exists
func (_mr *MockRedisClientMockRecorder) Exists(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Exists", reflect.TypeOf((*MockRedisClient)(nil).Exists), arg0...)
}

// HSet mocks base method
func (_m *MockRedisClient) HSet(key string, field string, value interface{}) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "HSet", key, field, value)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// HSet indicates an expected call of HSet
func (_mr *MockRedisClientMockRecorder) HSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HSet", reflect.TypeOf((*MockRedisClient)(nil).HSet), arg0, arg1, arg2)
}

// Get mocks base method
func (_m *MockRedisClient) Get(key string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "Get", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockRedisClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockRedisClient)(nil).Get), arg0)
}

// HGet mocks base method
func (_m *MockRedisClient) HGet(key string, field string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "HGet", key, field)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// HGet indicates an expected call of HGet
func (_mr *MockRedisClientMockRecorder) HGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HGet", reflect.TypeOf((*MockRedisClient)(nil).HGet), arg0, arg1)
}

// HGetAll mocks base method
func (_m *MockRedisClient) HGetAll(_param0 string) *redis.StringStringMapCmd {
	ret := _m.ctrl.Call(_m, "HGetAll", _param0)
	ret0, _ := ret[0].(*redis.StringStringMapCmd)
	return ret0
}

// HGetAll indicates an expected call of HGetAll
func (_mr *MockRedisClientMockRecorder) HGetAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HGetAll", reflect.TypeOf((*MockRedisClient)(nil).HGetAll), arg0)
}

// HMSet mocks base method
func (_m *MockRedisClient) HMSet(_param0 string, _param1 map[string]interface{}) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "HMSet", _param0, _param1)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// HMSet indicates an expected call of HMSet
func (_mr *MockRedisClientMockRecorder) HMSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HMSet", reflect.TypeOf((*MockRedisClient)(nil).HMSet), arg0, arg1)
}

// Ping mocks base method
func (_m *MockRedisClient) Ping() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Ping")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Ping indicates an expected call of Ping
func (_mr *MockRedisClientMockRecorder) Ping() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Ping", reflect.TypeOf((*MockRedisClient)(nil).Ping))
}

// RPopLPush mocks base method
func (_m *MockRedisClient) RPopLPush(source string, destination string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "RPopLPush", source, destination)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// RPopLPush indicates an expected call of RPopLPush
func (_mr *MockRedisClientMockRecorder) RPopLPush(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RPopLPush", reflect.TypeOf((*MockRedisClient)(nil).RPopLPush), arg0, arg1)
}

// RPush mocks base method
func (_m *MockRedisClient) RPush(key string, values ...interface{}) *redis.IntCmd {
	_s := []interface{}{key}
	for _, _x := range values {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RPush", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// RPush indicates an expected call of RPush
func (_mr *MockRedisClientMockRecorder) RPush(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RPush", reflect.TypeOf((*MockRedisClient)(nil).RPush), _s...)
}

// SAdd mocks base method
func (_m *MockRedisClient) SAdd(key string, members ...interface{}) *redis.IntCmd {
	_s := []interface{}{key}
	for _, _x := range members {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SAdd", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SAdd indicates an expected call of SAdd
func (_mr *MockRedisClientMockRecorder) SAdd(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SAdd", reflect.TypeOf((*MockRedisClient)(nil).SAdd), _s...)
}

// ScriptExists mocks base method
func (_m *MockRedisClient) ScriptExists(scripts ...string) *redis.BoolSliceCmd {
	_s := []interface{}{}
	for _, _x := range scripts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ScriptExists", _s...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// ScriptExists indicates an expected call of ScriptExists
func (_mr *MockRedisClientMockRecorder) ScriptExists(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ScriptExists", reflect.TypeOf((*MockRedisClient)(nil).ScriptExists), arg0...)
}

// ScriptLoad mocks base method
func (_m *MockRedisClient) ScriptLoad(script string) *redis.StringCmd {
	ret := _m.ctrl.Call(_m, "ScriptLoad", script)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ScriptLoad indicates an expected call of ScriptLoad
func (_mr *MockRedisClientMockRecorder) ScriptLoad(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ScriptLoad", reflect.TypeOf((*MockRedisClient)(nil).ScriptLoad), arg0)
}

// Set mocks base method
func (_m *MockRedisClient) Set(key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Set", key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set
func (_mr *MockRedisClientMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Set", reflect.TypeOf((*MockRedisClient)(nil).Set), arg0, arg1, arg2)
}

// SetNX mocks base method
func (_m *MockRedisClient) SetNX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "SetNX", key, value, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SetNX indicates an expected call of SetNX
func (_mr *MockRedisClientMockRecorder) SetNX(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetNX", reflect.TypeOf((*MockRedisClient)(nil).SetNX), arg0, arg1, arg2)
}

// SIsMember mocks base method
func (_m *MockRedisClient) SIsMember(key string, member interface{}) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "SIsMember", key, member)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SIsMember indicates an expected call of SIsMember
func (_mr *MockRedisClientMockRecorder) SIsMember(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SIsMember", reflect.TypeOf((*MockRedisClient)(nil).SIsMember), arg0, arg1)
}

// SMembers mocks base method
func (_m *MockRedisClient) SMembers(key string) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "SMembers", key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SMembers indicates an expected call of SMembers
func (_mr *MockRedisClientMockRecorder) SMembers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SMembers", reflect.TypeOf((*MockRedisClient)(nil).SMembers), arg0)
}

// SPopN mocks base method
func (_m *MockRedisClient) SPopN(key string, count int64) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "SPopN", key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SPopN indicates an expected call of SPopN
func (_mr *MockRedisClientMockRecorder) SPopN(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SPopN", reflect.TypeOf((*MockRedisClient)(nil).SPopN), arg0, arg1)
}

// TTL mocks base method
func (_m *MockRedisClient) TTL(key string) *redis.DurationCmd {
	ret := _m.ctrl.Call(_m, "TTL", key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// TTL indicates an expected call of TTL
func (_mr *MockRedisClientMockRecorder) TTL(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TTL", reflect.TypeOf((*MockRedisClient)(nil).TTL), arg0)
}

// TxPipeline mocks base method
func (_m *MockRedisClient) TxPipeline() redis.Pipeliner {
	ret := _m.ctrl.Call(_m, "TxPipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// TxPipeline indicates an expected call of TxPipeline
func (_mr *MockRedisClientMockRecorder) TxPipeline() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TxPipeline", reflect.TypeOf((*MockRedisClient)(nil).TxPipeline))
}

// WithContext mocks base method
func (_m *MockRedisClient) WithContext(_param0 context.Context) *redis.Client {
	ret := _m.ctrl.Call(_m, "WithContext", _param0)
	ret0, _ := ret[0].(*redis.Client)
	return ret0
}

// WithContext indicates an expected call of WithContext
func (_mr *MockRedisClientMockRecorder) WithContext(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WithContext", reflect.TypeOf((*MockRedisClient)(nil).WithContext), arg0)
}

// ZCard mocks base method
func (_m *MockRedisClient) ZCard(key string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ZCard", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZCard indicates an expected call of ZCard
func (_mr *MockRedisClientMockRecorder) ZCard(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZCard", reflect.TypeOf((*MockRedisClient)(nil).ZCard), arg0)
}

// ZRangeByScore mocks base method
func (_m *MockRedisClient) ZRangeByScore(key string, opt redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRangeByScore", key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRangeByScore indicates an expected call of ZRangeByScore
func (_mr *MockRedisClientMockRecorder) ZRangeByScore(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZRangeByScore", reflect.TypeOf((*MockRedisClient)(nil).ZRangeByScore), arg0, arg1)
}

// ZRevRangeByScore mocks base method
func (_m *MockRedisClient) ZRevRangeByScore(key string, opt redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRevRangeByScore", key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRevRangeByScore indicates an expected call of ZRevRangeByScore
func (_mr *MockRedisClientMockRecorder) ZRevRangeByScore(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZRevRangeByScore", reflect.TypeOf((*MockRedisClient)(nil).ZRevRangeByScore), arg0, arg1)
}

// ZRangeByScoreWithScores mocks base method
func (_m *MockRedisClient) ZRangeByScoreWithScores(key string, opt redis.ZRangeBy) *redis.ZSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRangeByScoreWithScores", key, opt)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRangeByScoreWithScores indicates an expected call of ZRangeByScoreWithScores
func (_mr *MockRedisClientMockRecorder) ZRangeByScoreWithScores(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZRangeByScoreWithScores", reflect.TypeOf((*MockRedisClient)(nil).ZRangeByScoreWithScores), arg0, arg1)
}

// ZRevRangeByScoreWithScores mocks base method
func (_m *MockRedisClient) ZRevRangeByScoreWithScores(key string, opt redis.ZRangeBy) *redis.ZSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRevRangeByScoreWithScores", key, opt)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRevRangeByScoreWithScores indicates an expected call of ZRevRangeByScoreWithScores
func (_mr *MockRedisClientMockRecorder) ZRevRangeByScoreWithScores(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZRevRangeByScoreWithScores", reflect.TypeOf((*MockRedisClient)(nil).ZRevRangeByScoreWithScores), arg0, arg1)
}

// ZRangeWithScores mocks base method
func (_m *MockRedisClient) ZRangeWithScores(key string, start int64, stop int64) *redis.ZSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRangeWithScores", key, start, stop)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRangeWithScores indicates an expected call of ZRangeWithScores
func (_mr *MockRedisClientMockRecorder) ZRangeWithScores(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZRangeWithScores", reflect.TypeOf((*MockRedisClient)(nil).ZRangeWithScores), arg0, arg1, arg2)
}

// ZRank mocks base method
func (_m *MockRedisClient) ZRank(key string, member string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ZRank", key, member)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRank indicates an expected call of ZRank
func (_mr *MockRedisClientMockRecorder) ZRank(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZRank", reflect.TypeOf((*MockRedisClient)(nil).ZRank), arg0, arg1)
}

// ZRem mocks base method
func (_m *MockRedisClient) ZRem(key string, members ...interface{}) *redis.IntCmd {
	_s := []interface{}{key}
	for _, _x := range members {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ZRem", _s...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRem indicates an expected call of ZRem
func (_mr *MockRedisClientMockRecorder) ZRem(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZRem", reflect.TypeOf((*MockRedisClient)(nil).ZRem), _s...)
}

// ZRevRangeWithScores mocks base method
func (_m *MockRedisClient) ZRevRangeWithScores(key string, start int64, stop int64) *redis.ZSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRevRangeWithScores", key, start, stop)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRevRangeWithScores indicates an expected call of ZRevRangeWithScores
func (_mr *MockRedisClientMockRecorder) ZRevRangeWithScores(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZRevRangeWithScores", reflect.TypeOf((*MockRedisClient)(nil).ZRevRangeWithScores), arg0, arg1, arg2)
}

// ZRevRank mocks base method
func (_m *MockRedisClient) ZRevRank(key string, member string) *redis.IntCmd {
	ret := _m.ctrl.Call(_m, "ZRevRank", key, member)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRevRank indicates an expected call of ZRevRank
func (_mr *MockRedisClientMockRecorder) ZRevRank(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZRevRank", reflect.TypeOf((*MockRedisClient)(nil).ZRevRank), arg0, arg1)
}

// ZScore mocks base method
func (_m *MockRedisClient) ZScore(key string, member string) *redis.FloatCmd {
	ret := _m.ctrl.Call(_m, "ZScore", key, member)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZScore indicates an expected call of ZScore
func (_mr *MockRedisClientMockRecorder) ZScore(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ZScore", reflect.TypeOf((*MockRedisClient)(nil).ZScore), arg0, arg1)
}
