// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/s3.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockS3 is a mock of S3 interface
type MockS3 struct {
	ctrl     *gomock.Controller
	recorder *MockS3MockRecorder
}

// MockS3MockRecorder is the mock recorder for MockS3
type MockS3MockRecorder struct {
	mock *MockS3
}

// NewMockS3 creates a new mock instance
func NewMockS3(ctrl *gomock.Controller) *MockS3 {
	mock := &MockS3{ctrl: ctrl}
	mock.recorder = &MockS3MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockS3) EXPECT() *MockS3MockRecorder {
	return _m.recorder
}

// DeleteObject mocks base method
func (_m *MockS3) DeleteObject(key string) error {
	ret := _m.ctrl.Call(_m, "DeleteObject", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject
func (_mr *MockS3MockRecorder) DeleteObject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteObject", reflect.TypeOf((*MockS3)(nil).DeleteObject), arg0)
}

// PutObjectRequest mocks base method
func (_m *MockS3) PutObjectRequest(key string, acl string) (string, http.Header, error) {
	ret := _m.ctrl.Call(_m, "PutObjectRequest", key, acl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(http.Header)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PutObjectRequest indicates an expected call of PutObjectRequest
func (_mr *MockS3MockRecorder) PutObjectRequest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutObjectRequest", reflect.TypeOf((*MockS3)(nil).PutObjectRequest), arg0, arg1)
}
